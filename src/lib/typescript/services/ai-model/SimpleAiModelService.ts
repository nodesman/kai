import { IAiModelService } from './IAiModelService';
import { TestScenario } from '../../types/specification'; // Assuming path
import { ParsedErrorDetails } from '../test-parser/JestOutputParser'; // Assuming path

export class SimpleAiModelService implements IAiModelService {
  public async prompt(systemMessage: string, userPrompt: string, context?: any): Promise<string> {
    console.log("SimpleAiModelService received prompt request.");
    console.log("System Message:", systemMessage);
    console.log("User Prompt:", userPrompt.substring(0, 200) + "..."); // Log snippet
    // console.log("Context:", context); // Can be verbose

    if (userPrompt.includes("Generate a Jest test for the following scenario")) {
      const scenario = context as TestScenario;
      console.log(`SimpleAI: Generating test code for scenario: "${scenario?.description}"`);
      return `
// Test generated by SimpleAiModelService
describe('${scenario?.focusArea?.replace(/'/g, "\\'") || 'DefaultSuite'}', () => {
  it('${scenario?.description?.replace(/'/g, "\\'") || 'should initially fail'}', () => {
    // This is a generic placeholder test.
    // It expects a function related to focusArea to be defined and work correctly.
    // For a real scenario, the AI would generate more specific code based on context.
    // For example, if focusArea was "myFunction", it might try:
    // expect(myFunction()).toBe(true); 
    // This generic version will fail if 'false' is not 'true'.
    expect(false).toBe(true); // Simple initially failing test
  });
});
      `;
    } else if (userPrompt.includes("Diagnose the following Jest test failure")) {
      const errorDetails = context as ParsedErrorDetails;
      console.log(`SimpleAI: Diagnosing failure for test: "${errorDetails?.testName}"`);
      return `SimpleAI Diagnosis: The test '${errorDetails?.testName}' failed.
Error: ${errorDetails?.errorMessage}.
Likely cause: The code does not yet implement the required functionality for '${errorDetails?.testName}'.
File: ${errorDetails?.filePath || 'unknown'}:${errorDetails?.lineNumber || 'unknown'}.
Focus on implementing the logic described in the scenario.`;
    } else if (userPrompt.includes("Generate a code fix for the following")) {
      const scenario = context?.scenario as TestScenario; // Assuming context structure
      console.log(`SimpleAI: Generating code fix for scenario: "${scenario?.description}"`);
      const fixContent = `
// Code fix generated by SimpleAiModelService for ${scenario?.focusArea}
function ${scenario?.focusArea || 'placeholderFunction'}() {
  // This function should now make the related test pass.
  return true; 
}
// End of SimpleAiModelService generated fix
      `;
      // Determine a plausible file path based on focusArea
      // This is a simplification for the placeholder.
      const focusPath = scenario?.focusArea?.replace(/\s+/g, '') || 'DefaultModule';
      const mockFilePath = `src/lib/code-gen/${focusPath}.ts`;

      return JSON.stringify({
        filePathToModify: mockFilePath,
        codeOrDiffContent: fixContent,
        type: 'full_content' // SimpleAI always provides full content for now
      });
    }

    console.warn("SimpleAiModelService: No specific handler for the prompt, returning generic response.");
    return "/* SimpleAiModelService: Generic placeholder response. */";
  }
}
