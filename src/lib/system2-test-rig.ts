import * as fs from 'fs/promises';
import * as path from 'path';

import { AgenticTddService } from './typescript/services/agentic-tdd/AgenticTddService';
import { NodeFileSystemService } from './typescript/services/file-system/NodeFileSystemService';
import { IFileSystemService } from './typescript/services/file-system/IFileSystemService';
import { JestOutputParser } from './typescript/services/test-parser/JestOutputParser';
import { SimpleAiModelService } from './typescript/services/ai-model/SimpleAiModelService';
import { TestRunnerService } from './typescript/services/test-runner/TestRunnerService';
import { Specification, TestScenario } from './typescript/types/specification';
import { IAiModelService } from './typescript/services/ai-model/IAiModelService';
import { ParsedErrorDetails } from './typescript/services/test-parser/JestOutputParser';


const CALCULATOR_FILE_PATH = path.resolve(__dirname, 'sample-project/calculator.ts');

// Store original content for restoration
let originalCalculatorContent: string;

class ConfigurableSimpleAiModelService extends SimpleAiModelService {
  async prompt(systemMessage: string, userPrompt: string, context?: any): Promise<string> {
    console.log("ConfigurableSimpleAiModelService received prompt request.");
    // console.log("System Message:", systemMessage);
    // console.log("User Prompt:", userPrompt.substring(0, 150) + "...");
    // console.log("Context:", context);

    const scenario = context as TestScenario; // For test gen and fix gen (if context is just scenario)
    const errorDetails = context?.parsedError as ParsedErrorDetails; // For analysis
    const analysisContext = context?.analysis as string; // For fix gen

    if (userPrompt.includes("Generate a Jest test for the following scenario")) {
      if (scenario?.description === "should correctly subtract two numbers") {
        console.log(`ConfigurableAI: Generating specific test for "should correctly subtract two numbers"`);
        return `
// Test generated by ConfigurableSimpleAiModelService for Calculator.subtract
// Uses relative import, assuming calculator.ts is copied to the same temp directory.
import { Calculator } from './calculator'; 

describe('Calculator.subtract', () => {
  it('should correctly subtract two numbers', () => {
    const calculator = new Calculator();
    // This will cause a runtime error if subtract is not defined,
    // or an assertion error if it's defined but incorrect.
    expect(calculator.subtract(5, 2)).toBe(3);
  });
});
        `;
      }
    } else if (userPrompt.includes("Diagnose the following Jest test failure")) {
      if (errorDetails?.testName?.includes("should correctly subtract two numbers")) {
        console.log(`ConfigurableAI: Diagnosing specific failure for "should correctly subtract two numbers"`);
        return `ConfigurableAI Diagnosis: The test 'Calculator.subtract > should correctly subtract two numbers' failed.
Error: ${errorDetails?.errorMessage || 'Method not found or incorrect implementation.'}.
Likely cause: The 'subtract' method is missing from the Calculator class or not implemented correctly.
File: ${errorDetails?.filePath || CALCULATOR_FILE_PATH}.
Focus on implementing the 'subtract' method in '${CALCULATOR_FILE_PATH}'.`;
      }
    } else if (userPrompt.includes("Generate a code fix for the following")) {
      // Assuming the context for fix generation will include the scenario
      if (context?.scenario?.description === "should correctly subtract two numbers") {
        console.log(`ConfigurableAI: Generating specific code fix for "should correctly subtract two numbers"`);
        const fixContent = `// src/lib/sample-project/calculator.ts
export class Calculator {
  add(a: number, b: number): number {
    return a + b;
  }

  subtract(a: number, b: number): number {
    return a - b; // The fix
  }
}`;
        return JSON.stringify({
          filePathToModify: CALCULATOR_FILE_PATH,
          codeOrDiffContent: fixContent,
          type: 'full_content'
        });
      }
    }
    
    console.warn("ConfigurableSimpleAiModelService: No specific handler for this prompt, falling back to parent or generic.");
    // Fallback to default SimpleAiModelService behavior if no override matches
    return super.prompt(systemMessage, userPrompt, context); 
  }
}


const sampleSpecification: Specification = {
  featureDescription: "Add a subtract method to the Calculator",
  affectedFiles: [CALCULATOR_FILE_PATH],
  changes: [{
    filePath: CALCULATOR_FILE_PATH,
    description: "Add a subtract(a, b) method that returns a - b.",
    type: "modification",
    targetElement: "Calculator"
  }],
  testScenarios: [{
    description: "should correctly subtract two numbers",
    type: "unit",
    focusArea: "Calculator.subtract", // Used by AI to generate test and code
    expectedOutcome: "The subtract method should be added to the Calculator class and work correctly."
  }]
};

async function main() {
  console.log("--- Starting Agentic TDD System Test Rig ---");

  const fileSystemService: IFileSystemService = new NodeFileSystemService();
  const outputParser = new JestOutputParser();
  const aiModelService: IAiModelService = new ConfigurableSimpleAiModelService();
  const testRunnerService = new TestRunnerService(); // Uses Jest

  const agenticTddService = new AgenticTddService(
    testRunnerService,
    outputParser,
    aiModelService,
    fileSystemService
  );

  try {
    originalCalculatorContent = await fileSystemService.readFile(CALCULATOR_FILE_PATH);
    console.log("\n--- Initial content of calculator.ts ---");
    console.log(originalCalculatorContent);

    console.log("\n--- Processing specification ---");
    const success = await agenticTddService.processSpecification(sampleSpecification);
    console.log(`\n--- Specification processing completed. Overall Success: ${success} ---`);

    const finalCalculatorContent = await fileSystemService.readFile(CALCULATOR_FILE_PATH);
    console.log("\n--- Final content of calculator.ts ---");
    console.log(finalCalculatorContent);

    if (success && finalCalculatorContent.includes("subtract(a: number, b: number): number")) {
        console.log("\nSUCCESS: Test rig completed, and calculator.ts was modified as expected.");
    } else if (success) {
        console.warn("\nWARNING: Test rig reported success, but calculator.ts content might not be as expected.");
    }
     else {
        console.error("\nFAILURE: Test rig reported failure or calculator.ts was not modified as expected.");
    }

  } catch (error) {
    console.error("\n--- ERROR in test rig ---");
    console.error(error);
  } finally {
    // Cleanup: Restore original content
    if (originalCalculatorContent) {
      console.log("\n--- Restoring original content of calculator.ts ---");
      await fileSystemService.writeFile(CALCULATOR_FILE_PATH, originalCalculatorContent);
      console.log("Original content restored.");
    }
    const tempDirPattern = path.join(os.tmpdir(), 'agentic-tdd-');
    // Basic cleanup of temp dirs - more robust cleanup would be needed in a real app
    // For now, AgenticTddService cleans its own temp dir.
    console.log(`Note: Temporary test files are usually created in a sub-directory of ${os.tmpdir()} with pattern agentic-tdd-* and should be cleaned up by the service.`);
    console.log("\n--- Test Rig Finished ---");
  }
}

// Add os import for the tempDirPattern logging
import * as os from 'os';

main();
